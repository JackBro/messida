diff --git a/src/emu/debug/debugcon.c b/src/emu/debug/debugcon.c
index f52e166..6a06848 100644
--- a/src/emu/debug/debugcon.c
+++ b/src/emu/debug/debugcon.c
@@ -17,6 +17,11 @@
 #include "debugger.h"
 #include <ctype.h>
 
+#if defined (C_IDA_DEBUG)
+#include "mess_debmod.h"
+
+#define strcpy(dst, src) qstrncpy((dst), (src), sizeof(dst))
+#endif
 
 
 /***************************************************************************
@@ -386,7 +391,9 @@ CMDERR debug_console_execute_command(running_machine &machine, const char *comma
 	if (echo)
 	{
 		machine.debug_view().update_all();
+#if !defined (C_IDA_DEBUG)
 		debugger_refresh_display(machine);
+#endif
 	}
 	return result;
 }
@@ -481,7 +488,11 @@ void CLIB_DECL debug_console_printf(running_machine &machine, const char *format
 	strvprintf(buffer, format, arg);
 	va_end(arg);
 
+#if !defined (C_IDA_DEBUG)
 	text_buffer_print(console_textbuf, buffer.c_str());
+#else
+    printf("%s\n", buffer.c_str());
+#endif
 
 	/* force an update of any console views */
 	machine.debug_view().update_all(DVT_CONSOLE);
diff --git a/src/emu/debug/debugcpu.c b/src/emu/debug/debugcpu.c
index 2eeb2e1..2cde8b2 100644
--- a/src/emu/debug/debugcpu.c
+++ b/src/emu/debug/debugcpu.c
@@ -22,6 +22,15 @@
 #include <ctype.h>
 #include <zlib.h>
 
+#if defined (C_IDA_DEBUG)
+#include "mess_debmod.h"
+
+extern running_machine *g_running_machine;
+extern codemap_t g_codemap;
+extern eventlist_t g_events;
+
+#define sprintf(str, format, x) qsnprintf(str, sizeof(str), format, (x))
+#endif
 
 /***************************************************************************
     CONSTANTS
@@ -1702,6 +1711,10 @@ device_debug::~device_debug()
 
 void device_debug::start_hook(const attotime &endtime)
 {
+#if defined (C_IDA_DEBUG)
+	g_running_machine = &m_device.machine();
+#endif
+
 	debugcpu_private *global = m_device.machine().debugcpu_data;
 
 	assert((m_device.machine().debug_flags & DEBUG_FLAG_ENABLED) != 0);
@@ -1822,6 +1835,11 @@ void device_debug::exception_hook(int exception)
 
 void device_debug::instruction_hook(offs_t curpc)
 {
+#if defined (C_IDA_DEBUG)
+	offs_t _pc = m_device.machine().firstcpu->pc();
+	if (_pc >= 0 && _pc < MAX_ROM_SIZE)
+		g_codemap[_pc] = std::pair<ea_t, bool>(m_pc_history[(m_pc_history_index-1) % HISTORY_SIZE], true);
+#endif
 	running_machine &machine = m_device.machine();
 	debugcpu_private *global = machine.debugcpu_data;
 
@@ -1862,7 +1880,19 @@ void device_debug::instruction_hook(offs_t curpc)
 
 			// if we hit 0, stop
 			if (m_stepsleft == 0)
+			{
+#if defined (C_IDA_DEBUG)
+				debug_event_t ev;
+				ev.eid = STEP;
+				ev.pid = 1;
+				ev.tid = 1;
+				ev.ea = _pc;
+				ev.handled = true;
+
+				g_events.enqueue(ev, IN_BACK);
+#endif
 				global->execution_state = EXECUTION_STATE_STOPPED;
+			}
 
 			// update every 100 steps until we are within 200 of the end
 			else if ((m_flags & DEBUG_FLAG_STEPPING_OUT) == 0 && (m_stepsleft < 200 || m_stepsleft % 100 == 0))
@@ -1887,6 +1917,16 @@ void device_debug::instruction_hook(offs_t curpc)
 		// check the temp running breakpoint and break if we hit it
 		else if ((m_flags & DEBUG_FLAG_STOP_PC) != 0 && m_stopaddr == curpc)
 		{
+#if defined (C_IDA_DEBUG)
+			debug_event_t ev;
+			ev.eid = PROCESS_SUSPEND;
+			ev.pid = 1;
+			ev.tid = 1;
+			ev.ea = _pc;
+			ev.handled = true;
+
+			g_events.enqueue(ev, IN_BACK);
+#endif
 			debug_console_printf(machine, "Stopped at temporary breakpoint %X on CPU '%s'\n", m_stopaddr, m_device.tag());
 			global->execution_state = EXECUTION_STATE_STOPPED;
 		}
@@ -1930,8 +1970,13 @@ void device_debug::instruction_hook(offs_t curpc)
 
 			// clear the memory modified flag and wait
 			global->memory_modified = false;
+#ifndef C_IDA_DEBUG
 			if (machine.debug_flags & DEBUG_FLAG_OSD_ENABLED)
 				machine.osd().wait_for_debugger(m_device, firststop);
+#else
+            while (global->execution_state != EXECUTION_STATE_RUNNING && !machine.scheduled_event_pending())
+                osd_sleep(1);
+#endif
 			firststop = false;
 
 			// if something modified memory, update the screen
@@ -2901,6 +2946,19 @@ void device_debug::breakpoint_check(offs_t pc)
 		if (bp->hit(pc))
 		{
 			// halt in the debugger by default
+#if defined (C_IDA_DEBUG)
+			debug_event_t ev;
+			ev.eid = BREAKPOINT;
+			ev.pid = 1;
+			ev.tid = 1;
+			ev.ea = pc;
+			ev.handled = true;
+
+			ev.bpt.hea = BADADDR;
+			ev.bpt.kea = BADADDR;
+
+			g_events.enqueue(ev, IN_BACK);
+#endif
 			debugcpu_private *global = m_device.machine().debugcpu_data;
 			global->execution_state = EXECUTION_STATE_STOPPED;
 
@@ -2920,6 +2978,19 @@ void device_debug::breakpoint_check(offs_t pc)
 		if (rp->hit())
 		{
 			// halt in the debugger by default
+#if defined (C_IDA_DEBUG)
+			debug_event_t ev;
+			ev.eid = BREAKPOINT;
+			ev.pid = 1;
+			ev.tid = 1;
+			ev.ea = pc;
+			ev.handled = true;
+
+			ev.bpt.hea = BADADDR;
+			ev.bpt.kea = BADADDR;
+
+			g_events.enqueue(ev, IN_BACK);
+#endif
 			debugcpu_private *global = m_device.machine().debugcpu_data;
 			global->execution_state = EXECUTION_STATE_STOPPED;
 
@@ -3031,6 +3102,19 @@ void device_debug::watchpoint_check(address_space &space, int type, offs_t addre
 		if (wp->hit(type, address, size))
 		{
 			// halt in the debugger by default
+#if defined (C_IDA_DEBUG)
+			debug_event_t ev;
+			ev.eid = BREAKPOINT;
+			ev.pid = 1;
+			ev.tid = 1;
+			ev.ea = pc();
+			ev.handled = true;
+
+			ev.bpt.hea = address;
+			ev.bpt.kea = address;
+
+			g_events.enqueue(ev, IN_BACK);
+#endif
 			global->execution_state = EXECUTION_STATE_STOPPED;
 
 			// if we hit, evaluate the action
diff --git a/src/osd/modules/debugger/win/debugviewinfo.c b/src/osd/modules/debugger/win/debugviewinfo.c
index b486880..7f971b6 100644
--- a/src/osd/modules/debugger/win/debugviewinfo.c
+++ b/src/osd/modules/debugger/win/debugviewinfo.c
@@ -15,6 +15,8 @@
 
 #include "strconv.h"
 
+#include "winutil.h"
+
 
 // debugger view styles
 #define DEBUG_VIEW_STYLE    WS_CHILD | WS_VISIBLE | WS_CLIPCHILDREN
@@ -48,15 +50,15 @@ debugview_info::debugview_info(debugger_windows_interface &debugger, debugwin_in
 
 	// create the child view
 	m_wnd = CreateWindowEx(DEBUG_VIEW_STYLE_EX, TEXT("MAMEDebugView"), NULL, DEBUG_VIEW_STYLE,
-			0, 0, 100, 100, parent, NULL, GetModuleHandle(NULL), this);
+		    0, 0, 100, 100, parent, NULL, GetModuleHandleUni(), this);
 	if (m_wnd == NULL)
 		goto cleanup;
 
 	// create the scroll bars
 	m_hscroll = CreateWindowEx(HSCROLL_STYLE_EX, TEXT("SCROLLBAR"), NULL, HSCROLL_STYLE,
-			0, 0, 100, CW_USEDEFAULT, m_wnd, NULL, GetModuleHandle(NULL), this);
+			0, 0, 100, CW_USEDEFAULT, m_wnd, NULL, GetModuleHandleUni(), this);
 	m_vscroll = CreateWindowEx(VSCROLL_STYLE_EX, TEXT("SCROLLBAR"), NULL, VSCROLL_STYLE,
-			0, 0, CW_USEDEFAULT, 100, m_wnd, NULL, GetModuleHandle(NULL), this);
+			0, 0, CW_USEDEFAULT, 100, m_wnd, NULL, GetModuleHandleUni(), this);
 	if ((m_hscroll == NULL) || (m_vscroll == NULL))
 		goto cleanup;
 
@@ -254,7 +256,7 @@ HWND debugview_info::create_source_combobox(HWND parent, LONG_PTR userdata)
 {
 	// create a combo box
 	HWND const result = CreateWindowEx(COMBO_BOX_STYLE_EX, TEXT("COMBOBOX"), NULL, COMBO_BOX_STYLE,
-			0, 0, 100, 1000, parent, NULL, GetModuleHandle(NULL), NULL);
+			0, 0, 100, 1000, parent, NULL, GetModuleHandleUni(), NULL);
 	SetWindowLongPtr(result, GWLP_USERDATA, userdata);
 	SendMessage(result, WM_SETFONT, (WPARAM)metrics().debug_font(), (LPARAM)FALSE);
 
@@ -789,7 +791,7 @@ void debugview_info::register_window_class()
 
 		// initialize the description of the window class
 		wc.lpszClassName    = TEXT("MAMEDebugView");
-		wc.hInstance        = GetModuleHandle(NULL);
+		wc.hInstance        = GetModuleHandleUni();
 		wc.lpfnWndProc      = &debugview_info::static_view_proc;
 		wc.hCursor          = LoadCursor(NULL, IDC_ARROW);
 		wc.hIcon            = LoadIcon(wc.hInstance, MAKEINTRESOURCE(2));
@@ -799,6 +801,8 @@ void debugview_info::register_window_class()
 		wc.cbClsExtra       = 0;
 		wc.cbWndExtra       = 0;
 
+        UnregisterClass(wc.lpszClassName, wc.hInstance);
+
 		// register the class; fail if we can't
 		if (!RegisterClass(&wc))
 			fatalerror("Unable to register debug view class\n");
diff --git a/src/osd/modules/debugger/win/debugwininfo.c b/src/osd/modules/debugger/win/debugwininfo.c
index 1a3258c..943c782 100644
--- a/src/osd/modules/debugger/win/debugwininfo.c
+++ b/src/osd/modules/debugger/win/debugwininfo.c
@@ -17,6 +17,8 @@
 #include "window.h"
 #include "winutf8.h"
 
+#include "winutil.h"
+
 
 bool debugwin_info::s_window_class_registered = false;
 
@@ -36,7 +38,7 @@ debugwin_info::debugwin_info(debugger_windows_interface &debugger, bool is_main_
 	register_window_class();
 
 	m_wnd = win_create_window_ex_utf8(DEBUG_WINDOW_STYLE_EX, "MAMEDebugWindow", title, DEBUG_WINDOW_STYLE,
-			0, 0, 100, 100, win_window_list->m_hwnd, create_standard_menubar(), GetModuleHandle(NULL), this);
+			0, 0, 100, 100, win_window_list->m_hwnd, create_standard_menubar(), GetModuleHandleUni(), this);
 	if (m_wnd == NULL)
 		return;
 
@@ -580,7 +582,7 @@ void debugwin_info::register_window_class()
 
 		// initialize the description of the window class
 		wc.lpszClassName    = TEXT("MAMEDebugWindow");
-		wc.hInstance        = GetModuleHandle(NULL);
+		wc.hInstance        = GetModuleHandleUni();
 		wc.lpfnWndProc      = &debugwin_info::static_window_proc;
 		wc.hCursor          = LoadCursor(NULL, IDC_ARROW);
 		wc.hIcon            = LoadIcon(wc.hInstance, MAKEINTRESOURCE(2));
@@ -590,6 +592,8 @@ void debugwin_info::register_window_class()
 		wc.cbClsExtra       = 0;
 		wc.cbWndExtra       = 0;
 
+        UnregisterClass(wc.lpszClassName, wc.hInstance);
+
 		// register the class; fail if we can't
 		if (!RegisterClass(&wc))
 			fatalerror("Unable to register debug window class\n");
diff --git a/src/osd/modules/debugger/win/editwininfo.c b/src/osd/modules/debugger/win/editwininfo.c
index 1ccd96f..279bc68 100644
--- a/src/osd/modules/debugger/win/editwininfo.c
+++ b/src/osd/modules/debugger/win/editwininfo.c
@@ -13,6 +13,8 @@
 
 #include "strconv.h"
 
+#include "winutil.h"
+
 
 // edit box styles
 #define EDIT_BOX_STYLE      WS_CHILD | WS_VISIBLE | ES_AUTOHSCROLL
@@ -32,7 +34,7 @@ editwin_info::editwin_info(debugger_windows_interface &debugger, bool is_main_co
 
 	// create an edit box and override its key handling
 	m_editwnd = CreateWindowEx(EDIT_BOX_STYLE_EX, TEXT("EDIT"), NULL, EDIT_BOX_STYLE,
-			0, 0, 100, 100, window(), NULL, GetModuleHandle(NULL), NULL);
+			0, 0, 100, 100, window(), NULL, GetModuleHandleUni(), NULL);
 	m_original_editproc = (WNDPROC)(FPTR)GetWindowLongPtr(m_editwnd, GWLP_WNDPROC);
 	SetWindowLongPtr(m_editwnd, GWLP_USERDATA, (LONG_PTR)this);
 	SetWindowLongPtr(m_editwnd, GWLP_WNDPROC, (LONG_PTR)&editwin_info::static_edit_proc);
diff --git a/src/osd/windows/input.c b/src/osd/windows/input.c
index ec08277..ef2f310 100644
--- a/src/osd/windows/input.c
+++ b/src/osd/windows/input.c
@@ -38,6 +38,8 @@
 #include "strconv.h"
 #include "config.h"
 
+#include "winutil.h"
+
 //============================================================
 //  PARAMETERS
 //============================================================
@@ -1117,7 +1119,7 @@ static void dinput_init(running_machine &machine)
 	int didevtype_joystick = DI8DEVCLASS_GAMECTRL;
 
 	dinput_version = DIRECTINPUT_VERSION;
-	result = DirectInput8Create(GetModuleHandle(NULL), dinput_version, IID_IDirectInput8, (void **)&dinput, NULL);
+	result = DirectInput8Create(GetModuleHandleUni(), dinput_version, IID_IDirectInput8, (void **)&dinput, NULL);
 	if (result != DI_OK)
 	{
 		dinput_version = 0;
@@ -1130,17 +1132,17 @@ static void dinput_init(running_machine &machine)
 
 	// first attempt to initialize DirectInput at the current version
 	dinput_version = DIRECTINPUT_VERSION;
-	result = DirectInputCreate(GetModuleHandle(NULL), dinput_version, &dinput, NULL);
+	result = DirectInputCreate(GetModuleHandleUni(), dinput_version, &dinput, NULL);
 	if (result != DI_OK)
 	{
 		// if that fails, try version 5
 		dinput_version = 0x0500;
-		result = DirectInputCreate(GetModuleHandle(NULL), dinput_version, &dinput, NULL);
+		result = DirectInputCreate(GetModuleHandleUni(), dinput_version, &dinput, NULL);
 		if (result != DI_OK)
 		{
 			// if that fails, try version 3
 			dinput_version = 0x0300;
-			result = DirectInputCreate(GetModuleHandle(NULL), dinput_version, &dinput, NULL);
+			result = DirectInputCreate(GetModuleHandleUni(), dinput_version, &dinput, NULL);
 			if (result != DI_OK)
 			{
 				dinput_version = 0;
diff --git a/src/osd/windows/output.c b/src/osd/windows/output.c
index 142488c..a818557 100644
--- a/src/osd/windows/output.c
+++ b/src/osd/windows/output.c
@@ -17,6 +17,8 @@
 // MAMEOS headers
 #include "output.h"
 
+#include "winutil.h"
+
 
 
 //============================================================
@@ -101,7 +103,7 @@ bool windows_osd_interface::output_init()
 						1, 1,
 						NULL,
 						NULL,
-						GetModuleHandle(NULL),
+						GetModuleHandleUni(),
 						NULL);
 	assert(output_hwnd != NULL);
 
@@ -167,9 +169,11 @@ static int create_window_class(void)
 
 		// initialize the description of the window class
 		wc.lpszClassName    = OUTPUT_WINDOW_CLASS;
-		wc.hInstance        = GetModuleHandle(NULL);
+		wc.hInstance        = GetModuleHandleUni();
 		wc.lpfnWndProc      = output_window_proc;
 
+        UnregisterClass(wc.lpszClassName, wc.hInstance);
+
 		// register the class; fail if we can't
 		if (!RegisterClass(&wc))
 			return 1;
diff --git a/src/osd/windows/window.c b/src/osd/windows/window.c
index 1bb225f..70e1cb6 100644
--- a/src/osd/windows/window.c
+++ b/src/osd/windows/window.c
@@ -35,6 +35,8 @@
 #include "config.h"
 #include "winutf8.h"
 
+#include "winutil.h"
+
 extern int drawnone_init(running_machine &machine, osd_draw_callbacks *callbacks);
 extern int drawgdi_init(running_machine &machine, osd_draw_callbacks *callbacks);
 extern int drawdd_init(running_machine &machine, osd_draw_callbacks *callbacks);
@@ -885,11 +887,13 @@ static void create_window_class(void)
 
 		// initialize the description of the window class
 		wc.lpszClassName    = TEXT("MAME");
-		wc.hInstance        = GetModuleHandle(NULL);
+		wc.hInstance        = GetModuleHandleUni();
 		wc.lpfnWndProc      = winwindow_video_window_proc_ui;
 		wc.hCursor          = LoadCursor(NULL, IDC_ARROW);
 		wc.hIcon            = LoadIcon(wc.hInstance, MAKEINTRESOURCE(2));
 
+        UnregisterClass(wc.lpszClassName, wc.hInstance);
+
 		// register the class; fail if we can't
 		if (!RegisterClass(&wc))
 			fatalerror("Failed to create window class\n");
@@ -1191,7 +1195,7 @@ int win_window_info::complete_create()
 						monitorbounds.left() + 100, monitorbounds.top() + 100,
 						NULL,//(win_window_list != NULL) ? win_window_list->m_hwnd : NULL,
 						menu,
-						GetModuleHandle(NULL),
+						GetModuleHandleUni(),
 						NULL);
 	if (m_hwnd == NULL)
 		return 1;
diff --git a/src/osd/windows/winmain.c b/src/osd/windows/winmain.c
index 54afff7..74317eb 100644
--- a/src/osd/windows/winmain.c
+++ b/src/osd/windows/winmain.c
@@ -1321,7 +1321,7 @@ FPTR symbol_manager::get_text_section_base()
 	dynamic_bind<PIMAGE_NT_HEADERS (WINAPI *)(PVOID)> image_nt_header(TEXT("dbghelp.dll"), "ImageNtHeader");
 
 	// start with the image base
-	PVOID base = reinterpret_cast<PVOID>(GetModuleHandle(NULL));
+	PVOID base = reinterpret_cast<PVOID>(GetModuleHandleUni());
 	assert(base != NULL);
 
 	// make sure we have the functions we need
diff --git a/src/osd/windows/winutil.c b/src/osd/windows/winutil.c
index adc78c3..64e7c5b 100644
--- a/src/osd/windows/winutil.c
+++ b/src/osd/windows/winutil.c
@@ -78,6 +78,9 @@ osd_dir_entry_type win_attributes_to_entry_type(DWORD attributes)
 
 BOOL win_is_gui_application(void)
 {
+#if defined (C_IDA_DEBUG)
+    return FALSE;
+#endif
 	static BOOL is_gui_frontend;
 	static BOOL is_first_time = TRUE;
 	HMODULE module;
@@ -92,7 +95,7 @@ BOOL win_is_gui_application(void)
 		is_first_time = FALSE;
 
 		// get the current module
-		module = GetModuleHandle(NULL);
+		module = GetModuleHandleUni();
 		if (!module)
 			return FALSE;
 		image_ptr = (BYTE*) module;
@@ -122,3 +125,14 @@ BOOL win_is_gui_application(void)
 	}
 	return is_gui_frontend;
 }
+
+//-------------------------------------------------
+//  Universal way to get module handle
+//-------------------------------------------------
+
+HMODULE WINAPI GetModuleHandleUni()
+{
+	MEMORY_BASIC_INFORMATION mbi;
+	VirtualQuery((LPCVOID)GetModuleHandleUni, &mbi, sizeof(mbi));
+	return (HMODULE)mbi.AllocationBase;
+}
diff --git a/src/osd/windows/winutil.h b/src/osd/windows/winutil.h
index 7a469a2..c8d1190 100644
--- a/src/osd/windows/winutil.h
+++ b/src/osd/windows/winutil.h
@@ -15,5 +15,6 @@
 file_error win_error_to_file_error(DWORD error);
 osd_dir_entry_type win_attributes_to_entry_type(DWORD attributes);
 BOOL win_is_gui_application(void);
+HMODULE WINAPI GetModuleHandleUni();
 
 #endif // __WINUTIL__
